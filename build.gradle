// bintray
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

plugins {
    id 'com.gradle.build-scan' version '2.3'
    id 'com.github.ben-manes.versions' version '0.21.0' // task: dependencyUpdates
    id 'org.ajoberstar.reckon' version '0.11.0'
    id 'org.sonarqube' version '2.7.1'
}

reckon {
    scopeFromProp()
    stageFromProp('beta', 'rc', 'final')
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

task version {
    doLast {
        if (project.findProperty('reckon.stage')) {
            println "to tag and release a new version use:"
            println "git tag -a '${project.version}' -m '${project.version}' && git push origin '${project.version}'"
            println "to then publish on gradle: CI=true ./gradlew publishPlugins -Preckon.scope=patch -Preckon.stage=final"
        } else {
            println "to figure out the next version run:"
            println "CI=true ./gradlew version -Preckon.scope=[major,minor,patch] -Preckon.stage=[rc,final]"
            println "for example"
            println "CI=true ./gradlew version -Preckon.scope=patch -Preckon.stage=final"
            println "first publish on gradle: CI=true ./gradlew publishPlugins -Preckon.scope=patch -Preckon.stage=final"
        }
    }
}
reckonTagCreate.dependsOn "build"

allprojects {
    if (System.getenv('CI') == null) {
        project.version = '0.0.0-SNAPSHOT'
    }

    apply plugin: 'java'

    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.0'
        spoon_version = '7.4.0' //TODO: understand how to propagate this
        assertj_version = '3.12.2'
        junit5_version = '5.4.2'
        short_description='Compiles code against the deterministic Corda compiler and modules, checking if it is' +
                ' indeed deterministic'
        url='https://github.com/lucacampanella/corda-deterministic-validator-plugin'
        git_url = url + ".git"
    }

    group 'com.github.lucacampanella'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    test {
        // junit5 support
        useJUnitPlatform()

        if (System.getenv('CI') != null) {
            testLogging {
                events "passed", "skipped", "failed"
                exceptionFormat "full"
            }
        }
    }
}

subprojects {
    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter:$junit5_version")
        testImplementation("org.assertj:assertj-core:$assertj_version")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit5_version")
    }
}

// coverage
subprojects {
    apply plugin: 'jacoco'
}

apply plugin: 'base'
apply plugin: 'jacoco'
task jacocoMerge(type: JacocoMerge) {
    subprojects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'verification') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn subprojects.test, jacocoMerge

    additionalSourceDirs.from(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from(subprojects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile
    doLast {
        logger.lifecycle("report at: " + reports.html.entryPoint.toURI())
    }
}

allprojects {
    sonarqube {
        properties {
            property 'sonar.jacoco.reportPaths', jacocoMerge.destinationFile
        }
    }
}
project.tasks['sonarqube'].dependsOn jacocoRootReport

//releases
subprojects {
    if (sourceSets.main.allSource.isEmpty()) {
        println "returned empty from subproject " + project.name
        return // excluding test-only subprojects
    }

    apply plugin: 'maven-publish'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    //name = project.name todo: change fro gradle 5
                    description = project.short_description
                    url = project.url
//                    licenses {
//                        license {
//                            name = 'The Apache License, Version 2.0'
//                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        }
//                    }
                }
            }
        }
    }

    // bintray
    apply plugin: 'com.jfrog.bintray'
    def isReleaseBuild = project.version.toString().matches("[0-9.]+") // no "rc" or "snapshot"
    bintray {
        user = 'lucacampanella'
        key = System.getenv('BINTRAY_TOKEN')
        publications = project.publishing.publications.collect{ it.name }
        publish = isReleaseBuild //todo: fix

        override = true

        pkg {
            repo = isReleaseBuild ? 'mvn-release' : 'mvn-snapshot'
            name = project.name
            desc = project.short_description

            websiteUrl = project.url
            vcsUrl = project.git_url
            //githubRepo = project.git_url
            licenses = ['Apache-2.0']
            labels = ['configuration']
            version {
                name = project.version
                released = new Date()
                mavenCentralSync {
                    sync = false
                }
            }
        }
    }

    bintrayUpload {
        dependsOn publishToMavenLocal
        doFirst {
            Objects.requireNonNull(apiKey, 'missing bintray token')
        }
    }
    publish.dependsOn bintrayUpload

    bintrayUpload.onlyIf { System.getenv('CI') != null }
}